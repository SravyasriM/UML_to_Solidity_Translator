pragma solidity 0.7.5;

//package ProjectEuler


/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
 * number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * <p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * <p>Let us list the factors of the first seven triangle numbers:
 *
 * <p>1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28: 1,2,4,7,14,28 We can see
 * that 28 is the first triangle number to have over five divisors.
 *
 * <p>What is the value of the first triangle number to have over five hundred divisors?
 *
 * <p>link: https://projecteuler.net/problem=12
 */

contract Problem12
{
	/* returns the nth triangle number; that is, the sum of all the natural numbers less than, or equal to, n */

	function triangleNumber(int32 n) public returns(int32)
	{
			int32 sum = int32(0);
			for(int32 i = int32(0); i <= n; i++;)
			{
				sum += i;			}
			return sum;
	}

	function solution1(int32 number) public returns(int32)
	{
			// j represents the jth triangle number

			int32 j = int32(0);
			// n represents the triangle number corresponding to j

			int32 n = int32(0);
			// number of divisors for triangle number n

			int32 numberOfDivisors = int32(0);
			while(numberOfDivisors <= number)
			{
					// and also sets n to be the next triangle number

					numberOfDivisors = 0;
					j++;
					n = triangleNumber(j);
					// count the number of divisors

					for(int32 i = int32(1); i <= Math.sqrt(n); i++;)
					{
						if(n % i == 0)
						{
							numberOfDivisors++;						}					}
					// so multiply it by 2 to include the other corresponding half

					numberOfDivisors *= 2;

			}
			return n;
	}

}

library Problem12_Library
{
	/**
 * Driver Code
 */

	function main(string[] memory args) public
	{
	}

	/* returns the nth triangle number; that is, the sum of all the natural numbers less than, or equal to, n */

	function triangleNumber(int32 n) public returns(int32)
	{
			int32 sum = int32(0);
			for(int32 i = int32(0); i <= n; i++;)
			{
				sum += i;			}
			return sum;
	}

	function solution1(int32 number) public returns(int32)
	{
			// j represents the jth triangle number

			int32 j = int32(0);
			// n represents the triangle number corresponding to j

			int32 n = int32(0);
			// number of divisors for triangle number n

			int32 numberOfDivisors = int32(0);
			while(numberOfDivisors <= number)
			{
					// and also sets n to be the next triangle number

					numberOfDivisors = 0;
					j++;
					n = triangleNumber(j);
					// count the number of divisors

					for(int32 i = int32(1); i <= Math.sqrt(n); i++;)
					{
						if(n % i == 0)
						{
							numberOfDivisors++;						}					}
					// so multiply it by 2 to include the other corresponding half

					numberOfDivisors *= 2;

			}
			return n;
	}

}

