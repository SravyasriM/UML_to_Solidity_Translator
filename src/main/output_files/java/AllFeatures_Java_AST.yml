---
root(Type=CompilationUnit):
  types:
    - type(Type=ClassOrInterfaceDeclaration):
        isInterface: "true"
        name(Type=SimpleName):
          identifier: "Interface"
          comment(Type=LineComment):
            content: " Interface Declaration"
    - type(Type=ClassOrInterfaceDeclaration):
        isInterface: "false"
        name(Type=SimpleName):
          identifier: "Example"
        members:
          - member(Type=FieldDeclaration):
              modifiers:
                - modifier(Type=Modifier):
                    keyword: "PUBLIC"
              variables:
                - variable(Type=VariableDeclarator):
                    name(Type=SimpleName):
                      identifier: "a"
                    type(Type=PrimitiveType):
                      type: "INT"
          - member(Type=ConstructorDeclaration):
              body(Type=BlockStmt):
              name(Type=SimpleName):
                identifier: "Example"
              comment(Type=LineComment):
                content: " Constructor Declaration Demo"
              modifiers:
                - modifier(Type=Modifier):
                    keyword: "PUBLIC"
    - type(Type=ClassOrInterfaceDeclaration):
        isInterface: "false"
        name(Type=SimpleName):
          identifier: "AllFeatures"
          comment(Type=LineComment):
            content: " Class Declaration, Inheritance Demo"
        extendedTypes:
          - extendedType(Type=ClassOrInterfaceType):
              name(Type=SimpleName):
                identifier: "Example"
              comment(Type=LineComment):
                content: " Class Declaration, Inheritance Demo"
        implementedTypes:
          - implementedType(Type=ClassOrInterfaceType):
              name(Type=SimpleName):
                identifier: "Interface"
              comment(Type=LineComment):
                content: " Class Declaration, Inheritance Demo"
        members:
          - member(Type=FieldDeclaration):
              comment(Type=LineComment):
                content: " Field Declaration"
              variables:
                - variable(Type=VariableDeclarator):
                    name(Type=SimpleName):
                      identifier: "global_var"
                    type(Type=PrimitiveType):
                      type: "INT"
          - member(Type=InitializerDeclaration):
              isStatic: "false"
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=AssignExpr):
                        operator: "ASSIGN"
                        target(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "global_var"
                        value(Type=IntegerLiteralExpr):
                          value: "10"
                      comment(Type=LineComment):
                        content: " Initializer Declaration"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "foo"
              comment(Type=LineComment):
                content: " Method Declaration"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ReturnStmt):
                      expression(Type=IntegerLiteralExpr):
                        value: "10"
                      comment(Type=LineComment):
                        content: " Return Statement"
              type(Type=PrimitiveType):
                type: "INT"
              name(Type=SimpleName):
                identifier: "returnStatementDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=IntegerLiteralExpr):
                                value: "10"
                              name(Type=SimpleName):
                                identifier: "a"
                              type(Type=PrimitiveType):
                                type: "INT"
                      comment(Type=LineComment):
                        content: "Variable Declaration Expression"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "variableDeclarationExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=ArrayInitializerExpr):
                                values:
                                  - value(Type=IntegerLiteralExpr):
                                      value: "1"
                                  - value(Type=IntegerLiteralExpr):
                                      value: "2"
                              name(Type=SimpleName):
                                identifier: "a"
                              type(Type=ArrayType):
                                origin: "TYPE"
                                componentType(Type=PrimitiveType):
                                  type: "INT"
                      comment(Type=LineComment):
                        content: " Array Initializer Expression"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "arrayInitializerExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=IfStmt):
                      condition(Type=BooleanLiteralExpr):
                        value: "true"
                      elseStmt(Type=BlockStmt):
                      thenStmt(Type=BlockStmt):
                      comment(Type=LineComment):
                        content: "If-Else-Then"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "ifElseThenStatementDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=IfStmt):
                      condition(Type=BinaryExpr):
                        operator: "LESS"
                        left(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "a"
                        right(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "b"
                      thenStmt(Type=BlockStmt):
                      comment(Type=LineComment):
                        content: " Binary Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "binaryExprDemo"
              parameters:
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "a"
                    type(Type=PrimitiveType):
                      type: "INT"
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "b"
                    type(Type=PrimitiveType):
                      type: "INT"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=UnaryExpr):
                        operator: "POSTFIX_INCREMENT"
                        expression(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "a"
                      comment(Type=LineComment):
                        content: " Unary Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "unaryExprDemo"
              parameters:
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "a"
                    type(Type=PrimitiveType):
                      type: "INT"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ForStmt):
                      body(Type=BlockStmt):
                      compare(Type=BinaryExpr):
                        operator: "LESS"
                        left(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "i"
                        right(Type=IntegerLiteralExpr):
                          value: "100"
                      comment(Type=LineComment):
                        content: " For Statement Demo"
                      initialization:
                        - initialization(Type=VariableDeclarationExpr):
                            variables:
                              - variable(Type=VariableDeclarator):
                                  initializer(Type=IntegerLiteralExpr):
                                    value: "0"
                                  name(Type=SimpleName):
                                    identifier: "i"
                                  type(Type=PrimitiveType):
                                    type: "INT"
                      update:
                        - update(Type=UnaryExpr):
                            operator: "POSTFIX_INCREMENT"
                            expression(Type=NameExpr):
                              name(Type=SimpleName):
                                identifier: "i"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "forStmtDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=WhileStmt):
                      body(Type=BlockStmt):
                      condition(Type=BooleanLiteralExpr):
                        value: "true"
                      comment(Type=LineComment):
                        content: " While Statement Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "whileStmtDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=DoStmt):
                      body(Type=BlockStmt):
                      condition(Type=BooleanLiteralExpr):
                        value: "true"
                      comment(Type=LineComment):
                        content: "Do-while Statement Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "doWhileStmtDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=MethodCallExpr):
                        name(Type=SimpleName):
                          identifier: "foo"
                      comment(Type=LineComment):
                        content: " Method Call Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "methodCallExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=AssignExpr):
                        operator: "ASSIGN"
                        target(Type=NameExpr):
                          name(Type=SimpleName):
                            identifier: "a"
                        value(Type=IntegerLiteralExpr):
                          value: "10"
                      comment(Type=LineComment):
                        content: " Assignment Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "assignExprDemo"
              parameters:
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "a"
                    type(Type=PrimitiveType):
                      type: "INT"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=AssignExpr):
                        operator: "ASSIGN"
                        target(Type=ArrayAccessExpr):
                          index(Type=IntegerLiteralExpr):
                            value: "0"
                          name(Type=NameExpr):
                            name(Type=SimpleName):
                              identifier: "a"
                        value(Type=IntegerLiteralExpr):
                          value: "10"
                      comment(Type=LineComment):
                        content: " Array Access Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "arrayAccessExprDemo"
              parameters:
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "a"
                    type(Type=ArrayType):
                      origin: "TYPE"
                      componentType(Type=PrimitiveType):
                        type: "INT"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=WhileStmt):
                      body(Type=BlockStmt):
                        statements:
                          - statement(Type=BreakStmt):
                      condition(Type=BooleanLiteralExpr):
                        value: "true"
                      comment(Type=LineComment):
                        content: " Break Statement Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "breakStmtDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=WhileStmt):
                      body(Type=BlockStmt):
                        statements:
                          - statement(Type=ContinueStmt):
                      condition(Type=BooleanLiteralExpr):
                        value: "true"
                      comment(Type=LineComment):
                        content: " Continue Statement Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "continueStmtDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ForEachStmt):
                      body(Type=BlockStmt):
                      iterable(Type=NameExpr):
                        name(Type=SimpleName):
                          identifier: "arr"
                      variable(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              name(Type=SimpleName):
                                identifier: "i"
                              type(Type=PrimitiveType):
                                type: "INT"
                      comment(Type=LineComment):
                        content: " For-each Statement Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "forEachStmtDemo"
              parameters:
                - parameter(Type=Parameter):
                    isVarArgs: "false"
                    name(Type=SimpleName):
                      identifier: "arr"
                    type(Type=ArrayType):
                      origin: "TYPE"
                      componentType(Type=PrimitiveType):
                        type: "INT"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=ObjectCreationExpr):
                                type(Type=ClassOrInterfaceType):
                                  name(Type=SimpleName):
                                    identifier: "Example"
                              name(Type=SimpleName):
                                identifier: "example"
                              type(Type=ClassOrInterfaceType):
                                name(Type=SimpleName):
                                  identifier: "Example"
                      comment(Type=LineComment):
                        content: " Object Creation Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "objectCreationExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=IntegerLiteralExpr):
                                value: "10"
                              name(Type=SimpleName):
                                identifier: "a"
                              type(Type=PrimitiveType):
                                type: "INT"
                      comment(Type=LineComment):
                        content: " Integer Literal Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "integerLiteralExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=CharLiteralExpr):
                                value: "a"
                              name(Type=SimpleName):
                                identifier: "ch"
                              type(Type=PrimitiveType):
                                type: "CHAR"
                      comment(Type=LineComment):
                        content: " Character Literal Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "charLiteralExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=BooleanLiteralExpr):
                                value: "true"
                              name(Type=SimpleName):
                                identifier: "b"
                              type(Type=PrimitiveType):
                                type: "BOOLEAN"
                      comment(Type=LineComment):
                        content: " Boolean Literal Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "booleanLiteralExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=DoubleLiteralExpr):
                                value: "4.4"
                              name(Type=SimpleName):
                                identifier: "d"
                              type(Type=PrimitiveType):
                                type: "DOUBLE"
                      comment(Type=LineComment):
                        content: " Double Literal Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "doubleLiteralExprDemo"
          - member(Type=MethodDeclaration):
              body(Type=BlockStmt):
                statements:
                  - statement(Type=ExpressionStmt):
                      expression(Type=VariableDeclarationExpr):
                        variables:
                          - variable(Type=VariableDeclarator):
                              initializer(Type=StringLiteralExpr):
                                value: "Hello"
                              name(Type=SimpleName):
                                identifier: "str"
                              type(Type=ClassOrInterfaceType):
                                name(Type=SimpleName):
                                  identifier: "String"
                      comment(Type=LineComment):
                        content: " String Literal Expression Demo"
              type(Type=VoidType):
              name(Type=SimpleName):
                identifier: "stringLiteralExprDemo"
...